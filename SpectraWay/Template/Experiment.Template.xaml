<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:viewModels="clr-namespace:SpectraWay.ViewModel"
                    xmlns:local="clr-namespace:SpectraWay"
                    xmlns:converters="clr-namespace:SpectraWay.Converter"
                    
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:pc="clr-namespace:SpectraWay.Controls"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:behavior="clr-namespace:SpectraWay.Controls.Behavior"
                    xmlns:experiment="clr-namespace:SpectraWay.ViewModel.Experiment">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Localization/StringResourceProvider.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <converters:ExperimentStateToColorConverter x:Key="ExperimentStateToColorConverter" />
    <converters:DateTimeToString x:Key="DateTimeToString" />
    <converters:VisibilityConverter x:Key="VisibilityConverter"/>
    <converters:VisibilityHiddenConverter x:Key="VisibilityHiddenConverter"/>
    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    <converters:ExperimentEntityDataItemToDesc x:Key="ExperimentEntityDataItemToDesc"/>
    <converters:MultiInvertBoolConverter x:Key="MultiInvertBoolConverter"/>
    <converters:ExposureTimeConverter x:Key="ExposureTimeConverter"/>
    <DataTemplate x:Key="ExperimentTileView" DataType="experiment:ExperimentTileViewModel">

        <Border BorderThickness="0" BorderBrush="{DynamicResource AccentColorBrush}" Margin="0" VerticalAlignment="Top">
            <Grid  Margin="5" VerticalAlignment="Top" >
                <Grid.RowDefinitions>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                </Grid.RowDefinitions>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                        <ColumnDefinition Width="40"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>

                    <DockPanel Grid.RowSpan="2" DockPanel.Dock="Top" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Stretch">
                        <TextBlock TextWrapping="Wrap"  FontSize="25" Text="{Binding Name}"  Background="Transparent" MaxWidth="400" MinWidth="200"/>
                    </DockPanel>


                    <iconPacks:PackIconMaterial Grid.Row="0" Grid.Column="1"  Kind="{Binding ExperimentStatus, Converter={StaticResource ExperimentStateToColorConverter}, ConverterParameter=Icon}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  Height="28" Width="28"/>
                    <!--<iconPacks:PackIconMaterial Grid.Row="0" Grid.Column="1"  Kind="{Binding ExperimentStatus, Converter={StaticResource ExperimentStateToColorConverter}, ConverterParameter=Icon}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Foreground="{Binding ExperimentStatus, Converter={StaticResource ExperimentStateToColorConverter}}" Height="28" Width="28"/>-->
                    <TextBlock TextWrapping="Wrap" Grid.Row="1" Grid.Column="1" FontSize="11" Text="{Binding ExperimentStatus}" TextAlignment="Center"/>

                </Grid>
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>

                    </Grid.ColumnDefinitions>
                    <TextBlock TextWrapping="Wrap"  FontSize="15" Text="{Binding Category}" FontStyle="Italic" Background="Transparent" TextAlignment="Left"/>
                    <TextBlock TextWrapping="Wrap" Grid.Column="1"  FontSize="15" Text="{Binding DateTime, Converter={StaticResource DateTimeToString}}" FontStyle="Italic" Background="Transparent" TextAlignment="Right"/>
                    <!--<TextBlock TextWrapping="Wrap" Grid.Column="2"  FontSize="15" Text="{Binding ExperimentStatus}" FontStyle="Italic" Foreground="White" Background="{Binding ExperimentStatus, Converter={StaticResource ExperimentStateToColorConverter}}"  />-->

                </Grid>
                <Grid Grid.Row="2">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal"  Margin="0 10 0 0">
                            <TextBlock TextWrapping="Wrap" Width="100" FontWeight="Bold" Text="{Binding Instance[PhysicsModel].Value, Source={StaticResource StringResourceProvider},  StringFormat='\{0\}:'}"/>
                            <TextBlock TextWrapping="Wrap" TextAlignment="Left" Text="{Binding PhysicModel.DisplayName}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                            <TextBlock TextWrapping="Wrap"  Width="100" FontWeight="Bold"  Text="{Binding Instance[Spectrometer].Value, Source={StaticResource StringResourceProvider},  StringFormat='\{0\}:'}"/>
                            <TextBlock TextWrapping="Wrap" TextAlignment="Left" Text="{Binding SpectrometerName}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                            <TextBlock TextWrapping="Wrap"  Width="100" FontWeight="Bold"  Text="{Binding Instance[WaveRange].Value, Source={StaticResource StringResourceProvider},  StringFormat='\{0\}:'}"/>
                            <TextBlock TextWrapping="Wrap" Text="[" />
                            <TextBlock TextWrapping="Wrap" Text="{Binding WaveMin}"/>
                            <TextBlock TextWrapping="Wrap" Text="; "/>
                            <TextBlock TextWrapping="Wrap" Text="{Binding WaveMax}"/>
                            <TextBlock TextWrapping="Wrap" Text="]" />
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="0 10 0 0">
                            <TextBlock TextWrapping="Wrap"  Width="100" FontWeight="Bold" TextAlignment="Left" Text="{Binding Instance[DistanceList].Value, Source={StaticResource StringResourceProvider},  StringFormat='\{0\}:'}"/>
                            <TextBlock TextWrapping="Wrap" Text="[" />
                            <StackPanel  Orientation="Horizontal" HorizontalAlignment="Stretch">

                                <ItemsControl ItemsSource="{Binding DistanceRange}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel  Orientation="Horizontal" MaxWidth="200"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock TextWrapping="Wrap" Text="   "/>
                                                <TextBlock TextWrapping="Wrap" Text="{Binding}"/>
                                                <TextBlock TextWrapping="Wrap" Text=" "/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>


                            </StackPanel>
                            <TextBlock TextWrapping="Wrap" Text="]" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                            <TextBlock TextWrapping="Wrap"  Width="100" FontWeight="Bold" Text="{Binding Instance[BaseDistance].Value, Source={StaticResource StringResourceProvider},  StringFormat='\{0\}:'}"/>
                            <TextBlock TextWrapping="Wrap" TextAlignment="Left" Text="{Binding BaseDistance}"/>
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </Grid>
        </Border>

    </DataTemplate>

    <DataTemplate x:Key="ExperimentListView" DataType="experiment:ExperimentListViewModel">
        <!--<ItemsControl ItemsSource="{Binding ExperimentTileCollection}" >
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <ContentControl Content="{Binding}" ContentTemplate="{StaticResource ExperimentTileView}"></ContentControl>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel  Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>-->
        <ListBox x:Name="ExperimentListBox"
                           
                            ItemsSource="{Binding ExperimentTileCollection}" 
                            ItemTemplate="{StaticResource ExperimentTileView}"
                            SelectedItem="{Binding SelectedExperimentTile}"
                            Margin="0"
                            ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto"
                            HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel></WrapPanel>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <!--<ListBox.Style>
                <Style TargetType="ListBox" BasedOn="{StaticResource DisablingListBox}">
                    <Setter Property="Background" Value="Transparent"></Setter>
                    <Setter Property="BorderThickness" Value="0"/>
                </Style>
            </ListBox.Style>-->
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem" BasedOn="{StaticResource MetroListBoxItem}">
                    <Setter Property="Margin" Value="0 0 2 2"></Setter>
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"></Setter>
                    <Setter Property="BorderThickness" Value="1"></Setter>
                    <Setter Property="VerticalAlignment" Value="Stretch"></Setter>
                    <Setter Property="VerticalContentAlignment" Value="Top"></Setter>
                </Style>
            </ListBox.ItemContainerStyle>
            <!--<i:Interaction.Triggers>
                <common:MouseEnterFocusGrabberTrigger/>
            </i:Interaction.Triggers>-->
        </ListBox>
    </DataTemplate>


    <DataTemplate x:Key="ExperimentView" DataType="experiment:ExperimentViewModel">

        <Grid Margin="5" x:Name="ExperimentViewContainer">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" ></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MaxWidth="350"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>

            </Grid.ColumnDefinitions>
            <Grid.Resources>
                <Thickness x:Key="ControlMargin">4</Thickness>
                <Thickness x:Key="ControlPadding">7</Thickness>


            </Grid.Resources>

            <Grid.InputBindings>
                <KeyBinding Key="Enter" Command="{Binding SetIsRealTimeSpectrometerCommand}" CommandParameter="True"/>
                <KeyBinding Key="Escape" Command="{Binding SetIsRealTimeSpectrometerCommand}" CommandParameter="False"/>
            </Grid.InputBindings>
            <i:Interaction.Behaviors>
                <behavior:SpectrometerInteractivityBehavior />
            </i:Interaction.Behaviors>


            <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" HorizontalContentAlignment="Stretch">
                <StackPanel HorizontalAlignment="Stretch">
                    <ContentControl Grid.Row="0" Grid.Column="0" x:Name="ContentControl" Content="{Binding}" ContentTemplate="{StaticResource ExperimentTileView}" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"/>

                    <Grid Grid.Row="1" Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" ></RowDefinition>
                            <RowDefinition Height="Auto" ></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                        </Grid.RowDefinitions>

                        <StackPanel  Grid.Row="0" Width="{Binding ElementName=ContentControl, Path=ActualWidth}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  >
                            <WrapPanel Orientation="Horizontal">
                                <!--<TextBlock TextWrapping="Wrap" Margin="5"  FontWeight="Bold" VerticalAlignment="Center">CCD Levels</TextBlock TextWrapping="Wrap">-->
                                <TextBlock TextWrapping="Wrap" Margin="5"  FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[CcdLevels].Value, Source={StaticResource StringResourceProvider}}"/>
                                <ComboBox 
                          IsEditable="False"
                          ItemsSource="{Binding CcdLevelsCollection}"
                          Margin="{StaticResource ControlMargin}"
                          SelectedValue="{Binding CcdLevels, Mode=TwoWay}"
                          Style="{DynamicResource VirtualisedMetroComboBox}"
                           />
                                <CheckBox IsChecked="{Binding IsAutoResize}" Content="Auto"  Margin="{StaticResource ControlMargin}"/>
                            </WrapPanel>
                            <WrapPanel Orientation="Horizontal">
                                <!--<TextBlock TextWrapping="Wrap" Margin="5"  FontWeight="Bold" VerticalAlignment="Center">Spectrometer Status</TextBlock TextWrapping="Wrap">-->
                                <TextBlock TextWrapping="Wrap" Margin="5"  FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[SpectrometerStatus].Value, Source={StaticResource StringResourceProvider}}"/>
                                <controls:ToggleSwitch   Margin="{StaticResource ControlMargin}" Width="120" HorizontalAlignment="Left" HorizontalContentAlignment="Left"
                                   FontSize="12"
                                   
                                   OffLabel="{Binding Instance[Offline].Value, Source={StaticResource StringResourceProvider}}"
                                   OnLabel="{Binding Instance[Online].Value, Source={StaticResource StringResourceProvider}}"
                                   IsChecked="{Binding IsRealTimeSpectrometerData}"
                                   OnSwitchBrush="YellowGreen"/>
                            </WrapPanel>
                        </StackPanel>

                        <StackPanel  Grid.Row="1" Width="{Binding ElementName=ContentControl, Path=ActualWidth}"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsEnabled="{Binding IsShowSavedData, Converter={StaticResource InverseBooleanConverter}}">

                            <WrapPanel Orientation="Horizontal"  IsEnabled="{Binding IsRealTimeSpectrometerData}">
                                <TextBlock TextWrapping="Wrap" Margin="5"  FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[Exposure].Value, Source={StaticResource StringResourceProvider}}"/>
                                <controls:NumericUpDown x:Name="ExposureTimeTextbox"   
                                        FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}"
                                        Margin="{StaticResource ControlMargin}"
                                        Delay="1000"
                                        Speedup="true" 
                                        HasDecimals="False"
                                        Width="180"
                                        Interval="50"
                                        controls:TextBoxHelper.UseFloatingWatermark="True"
                                        controls:TextBoxHelper.Watermark="{Binding ExposureTime, Converter={StaticResource ExposureTimeConverter}}"
                                        Value="{Binding ExposureTime, Mode=OneWay}" >
                                    <controls:NumericUpDown.InputBindings>
                                        <KeyBinding Key="Enter" 
                                        Command="{Binding SetExposureCommand}"
                                        CommandParameter="{Binding ElementName=ExposureTimeTextbox, Path=Value}"/>
                                    </controls:NumericUpDown.InputBindings>
                                </controls:NumericUpDown>

                            </WrapPanel>

                            <WrapPanel Orientation="Horizontal">

                                <CheckBox IsChecked="{Binding IsNoiseRemove}" Content="{Binding Instance[RemoveNoise].Value, Source={StaticResource StringResourceProvider}}" IsEnabled="{Binding IsNoiseRemoveEnabled}" Margin="{StaticResource ControlMargin}"/>


                                <CheckBox IsChecked="{Binding IsNormalize}" Content="{Binding Instance[Normalize].Value, Source={StaticResource StringResourceProvider}}"  IsEnabled="{Binding IsNormalizeEnabled}" Margin="{StaticResource ControlMargin}"/>

                            </WrapPanel>
                            <WrapPanel Orientation="Horizontal">
                                <TextBlock TextWrapping="Wrap" Margin="5"  FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[Led].Value, Source={StaticResource StringResourceProvider}}"/>
                                <controls:ToggleSwitch   Margin="{StaticResource ControlMargin}" Width="120" HorizontalAlignment="Left" HorizontalContentAlignment="Left"
                                   FontSize="12"
                                   OffLabel="Disabled"
                                   OnLabel="Enabled"
                                   IsChecked="{Binding IsLedEnabled}"
                                   Style="{StaticResource MahApps.Metro.Styles.ToggleSwitch.Win10}"/>
                            </WrapPanel>
                            <WrapPanel Orientation="Horizontal">
                                <!--<TextBlock TextWrapping="Wrap" Margin="5"   FontWeight="Bold" VerticalAlignment="Center" >Current Distance</TextBlock TextWrapping="Wrap">-->
                                <TextBlock TextWrapping="Wrap" Margin="5"   FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[CurrentDistance].Value, Source={StaticResource StringResourceProvider}}"/>
                                <TextBlock TextWrapping="Wrap" Margin="{StaticResource ControlMargin}"  Text="{Binding CurrentDistance}" TextAlignment="Left"/>
                            </WrapPanel>

                            <WrapPanel Orientation="Horizontal">
                                <!--<TextBlock TextWrapping="Wrap" Margin="5"   FontWeight="Bold" VerticalAlignment="Center">Go To Distance</TextBlock TextWrapping="Wrap">-->
                                <TextBlock TextWrapping="Wrap" Margin="5"   FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[GoToDistance].Value, Source={StaticResource StringResourceProvider}}"/>

                                <ComboBox 
                                x:Name="DistanceRangeComboBox"
                                Margin="{StaticResource ControlMargin}"
                                IsEditable="False"
                                ItemsSource="{Binding DistanceRange}"
                                MaxDropDownHeight="125"
                                
                                Style="{DynamicResource VirtualisedMetroComboBox}"/>

                                <Button controls:ControlsHelper.ContentCharacterCasing="Normal" Padding="{StaticResource ControlPadding}"   Margin="{StaticResource ControlMargin}"   Command="{Binding GoToDistanceCommand}" CommandParameter="{Binding ElementName=DistanceRangeComboBox, Path=SelectedItem}" Style="{DynamicResource MetroCircleButtonStyle}" BorderThickness="0" HorizontalAlignment="Left"  >
                                    <iconPacks:PackIconEntypo Kind="LevelDown" />
                                </Button>
                            </WrapPanel>


                            <WrapPanel Margin="0 10" Orientation="Horizontal">
                                <TextBlock TextWrapping="Wrap" Margin="5"   FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Instance[SaveDataAs].Value, Source={StaticResource StringResourceProvider}}"/>
                                <StackPanel Orientation="Horizontal">

                                    <ComboBox 
                                x:Name="SaveAsComboBox"
                                Margin="{StaticResource ControlMargin}"
                                IsEditable="False"
                                SelectedValuePath="Tag"
                                MaxDropDownHeight="125"
                                SelectedIndex="0"
                                Style="{DynamicResource VirtualisedMetroComboBox}">
                                        <ComboBoxItem Content="{Binding Instance[CurrentL].Value, Source={StaticResource StringResourceProvider}}" Tag="CurrentL"/>
                                        <ComboBoxItem Content="{Binding Instance[Noise].Value, Source={StaticResource StringResourceProvider}}" Tag="Noise"/>
                                        <ComboBoxItem Content="{Binding Instance[Normalize].Value, Source={StaticResource StringResourceProvider}}" Tag="Normalize"/>

                                    </ComboBox>

                                    <Button controls:ControlsHelper.ContentCharacterCasing="Normal" Padding="{StaticResource ControlPadding}"   Margin="{StaticResource ControlMargin}"   Command="{Binding SaveAsCommand}" CommandParameter="{Binding ElementName=SaveAsComboBox, Path=SelectedValue}" Style="{DynamicResource MetroCircleButtonStyle}" BorderThickness="0" HorizontalAlignment="Left"  >
                                        <iconPacks:PackIconFontAwesome Kind="FloppyOutline" />
                                    </Button>


                                    <!--<Button controls:ControlsHelper.ContentCharacterCasing="Normal" Margin="{StaticResource ControlMargin}" Padding="{StaticResource ControlPadding}" Content="Noise"></Button>
                            <Button controls:ControlsHelper.ContentCharacterCasing="Normal" Margin="{StaticResource ControlMargin}" Padding="{StaticResource ControlPadding}" Content="normalizing"></Button>
                            <Button controls:ControlsHelper.ContentCharacterCasing="Normal" Margin="{StaticResource ControlMargin}" Padding="{StaticResource ControlPadding}" Content="Specrum for Current L"></Button>-->
                                </StackPanel>
                            </WrapPanel>


                        </StackPanel>
                        <Border Grid.Row="2"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border.Resources>

                                <ResourceDictionary>


                                    <Style x:Key="SmallTileStyle" TargetType="controls:Tile">
                                        <Setter Property="Height" Value="125" />
                                        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
                                        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
                                        <Setter Property="TitleFontSize" Value="12" />
                                        <Setter Property="Width" Value="200" />
                                    </Style>
                                </ResourceDictionary>

                            </Border.Resources>
                            <controls:Tile Title="{Binding Instance[SpectraForAllDistances].Value, Source={StaticResource StringResourceProvider}}"
                                       controls:ControlsHelper.MouseOverBorderBrush="{DynamicResource BlackBrush}"
                               Background="{DynamicResource AccentColorBrush}"
                                           Command="{Binding MeasureAllDistancesCommand}"
                                       HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                               Style="{StaticResource SmallTileStyle}">
                                <iconPacks:PackIconFontAwesome Kind="Magic"  Width="30" Height="30" />
                            </controls:Tile>
                            <!--<Button controls:ControlsHelper.ContentCharacterCasing="Normal" Padding="{StaticResource ControlPadding}" HorizontalAlignment="Center"  Margin="{StaticResource ControlMargin}"  Content="Automatically for all Distances" Style="{DynamicResource SquareButtonStyle}"></Button>-->

                        </Border>
                    </Grid>
                </StackPanel>
            </ScrollViewer>
            <Grid  Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"></RowDefinition>
                    <RowDefinition Height="Auto" MinHeight="200"></RowDefinition>
                </Grid.RowDefinitions>
                <!--<Grid.Resources>
                    <ResourceDictionary>
                        <Style x:Key="LineSeriesStyle" TargetType="lvc:LineSeries">
                            <Setter Property="Fill" Value="Transparent" />
                            <Setter Property="Stroke" Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="StrokeThickness" Value="1" />

                        </Style>
                    </ResourceDictionary>
                </Grid.Resources>-->
                <!--<lvc:CartesianChart DisableAnimations="True" DataTooltip="{x:Null}" Zoom="None" AllowDrop="False" >
                    <lvc:CartesianChart.Series >

                        <lvc:LineSeries AllowDrop="False"  Values="{Binding Values}" DataLabels="False" Style="{StaticResource LineSeriesStyle}" PointGeometrySize="0" LabelPoint="{x:Null}"  />
                    </lvc:CartesianChart.Series>
                    -->
                <!--<lvc:CartesianChart.AxisX >
                        <lvc:Axis IsMerged="True" MaxValue="{Binding WaveMax}" MinValue="{Binding WaveMin}" Labels="{Binding XValues}"/>
                    </lvc:CartesianChart.AxisX>-->
                <!--
                    <lvc:CartesianChart.AxisX >
                        <lvc:Axis   DisableAnimations="True"  MaxValue="{Binding WaveMax}" MinValue="{Binding WaveMin}" AllowDrop="False" />
                    </lvc:CartesianChart.AxisX>
                    <lvc:CartesianChart.AxisY >
                        <lvc:Axis DisableAnimations="True" MinValue="0" MaxValue="{Binding Spectrometer.CcdLevels}" AllowDrop="False"/>
                    </lvc:CartesianChart.AxisY>

                    -->
                <!--<lvc:CartesianChart.DataTooltip>
                        -->
                <!--The Selection mode property should be done automatically in future versions-->
                <!--
                        <lvc:DefaultTooltip SelectionMode="SharedYInSeries"></lvc:DefaultTooltip>
                    </lvc:CartesianChart.DataTooltip>-->
                <!--
                </lvc:CartesianChart>-->
                <!--<lvc:CartesianChart 
                    Canvas.ZIndex="26" 
                    AllowDrop="False"
                    DataTooltip="{x:Null}"
                    DisableAnimations="True"
                    Series="{Binding SeriesCollection}" 
                    Visibility="{Binding IsShowSavedData, Converter={StaticResource VisibilityConverter}}"/>-->
                <pc:CustomMultilineGraph
                    Canvas.ZIndex="26"
                    ShowLocator="True"
                    IsDivideToBase="{Binding IsDivideToBase}"
                    IsLogScale="{Binding IsLogarithmicScale}"
                    Visibility="{Binding IsShowSavedData, Converter={StaticResource VisibilityHiddenConverter}}"
                    
                    Data="{Binding SavedData}"/>
                <!--<Grid Grid.Row="0" Canvas.ZIndex="25"  Visibility="{Binding IsRealTimeSpectrometerData, Converter={StaticResource VisibilityConverter}}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="Transparent">
                    <i:Interaction.Behaviors>
                        <behavior:BlockMouseMoveBehaviour />
                    </i:Interaction.Behaviors>
                </Grid>-->
                <!--<pc:PerfGraph Visibility="{Binding IsShowSavedData, Converter={StaticResource VisibilityHiddenConverter}, ConverterParameter=Inverse}" Grid.Row="0" MaxX="{Binding WaveMax, Mode=OneWay}" MinX="{Binding WaveMin, Mode=OneWay}"  MinY="0" MaxY="{Binding CcdLevels, Mode=OneWay}" DataPoints="{Binding Values, Mode=OneWay}" Foreground="{DynamicResource AccentColorBrush}" ShowTooltip="{Binding IsRealTimeSpectrometerData, Converter={StaticResource InverseBooleanConverter}}" ShowLocator="{Binding IsRealTimeSpectrometerData, Converter={StaticResource InverseBooleanConverter}}"/>-->
                <pc:PerfGraph Visibility="{Binding IsShowSavedData, Converter={StaticResource VisibilityHiddenConverter}, ConverterParameter=Inverse}" Grid.Row="0" MaxX="{Binding WaveMax, Mode=OneWay}" MinX="{Binding WaveMin, Mode=OneWay}"  MinY="0" MaxY="{Binding CcdLevels, Mode=OneWay}" DataPoints="{Binding Values, Mode=OneWay}" Foreground="{DynamicResource AccentColorBrush}" ShowTooltip="True" ShowLocator="True"/>

                <Border  Grid.Row="1" BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="1" Padding="5" >

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>

                        </Grid.ColumnDefinitions>

                        <Grid  Grid.Column="0" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <StackPanel>

                                <controls:ToggleSwitch   Margin="{StaticResource ControlMargin}" Width="120" HorizontalAlignment="Left" HorizontalContentAlignment="Left"
                                   FontSize="12"
                                   controls:ControlsHelper.HeaderFontSize="14"
                                   Header="{Binding Instance[ShowSavedData].Value, Source={StaticResource StringResourceProvider},  StringFormat='\{0\}:'}"
                                   OffLabel="{Binding Instance[No].Value, Source={StaticResource StringResourceProvider}}"
                                   OnLabel="{Binding Instance[Yes].Value, Source={StaticResource StringResourceProvider}}"
                                   IsEnabled="{Binding IsShowSavedDataEnabled}"
                                   IsChecked="{Binding IsShowSavedData}"
                                   OnSwitchBrush="YellowGreen"/>

                                <CheckBox IsChecked="{Binding IsLogarithmicScale}" Content="{Binding Instance[LogScale].Value, Source={StaticResource StringResourceProvider}}" IsEnabled="{Binding IsLogarithmicScaleEnabled}" Margin="{StaticResource ControlMargin}"/>

                                <CheckBox x:Name="DivideToBaseCheckBox" IsChecked="{Binding  IsDivideToBase}"  Content="{Binding Instance[DivideToBase].Value, Source={StaticResource StringResourceProvider}}" IsEnabled="{Binding IsDivideToBaseEnabled}" Margin="{StaticResource ControlMargin}" />

                                <Button controls:ControlsHelper.ContentCharacterCasing="Normal" Style="{DynamicResource MetroCircleButtonStyle}" BorderThickness="0" HorizontalAlignment="left" Width="40" Command="{Binding AutoFilteringCommand}">
                                    <iconPacks:PackIconMaterial Kind="Filter" />
                                </Button>

                            </StackPanel>

                            <!--<ListView
                                    IsEnabled="{Binding IsShowSavedData}"
                                    Grid.Column="1"
                                    Margin="1"
                                    BorderThickness="1"
                                    ItemsSource="{Binding SavedData.DataItems}"
                                    MaxHeight="250"
                                MaxWidth="350"
                                    Style="{StaticResource VirtualisedMetroListView}">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn  Header="Show" >
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <CheckBox IsChecked="{Binding IsShow}"></CheckBox>
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        <GridViewColumn  Header="Desc" >
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock TextWrapping="Wrap" Text="{Binding ., Converter={StaticResource ExperimentEntityDataItemToDesc}}"/>
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        <GridViewColumn  Header="Is Base" >
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <iconPacks:PackIconMaterial Visibility="{Binding IsBase, Converter={StaticResource BooleanToVisibilityConverter}}" Kind="Check" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>-->

                            <DataGrid x:Name="SavedDataDataGrid"
                                      DataContext="{Binding}"
                                     IsEnabled="{Binding IsShowSavedData}"
                                     MaxHeight="250"
                                     MaxWidth="300"
                                     Grid.Column="1"
                                     BorderThickness="1"
                                     Margin="5"
                                      CanUserAddRows="False"
                                     AutoGenerateColumns="False"
                                     ItemsSource="{Binding SavedData.DataItems}"
                                     RowHeaderWidth="0">
                                <DataGrid.Resources>
                                    <ContextMenu x:Key="ContextMenu" DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                                        <MenuItem  Header="Apply Filter"
                                                       Command="{Binding Tag.OpenFilteringWindow}"
                                                       CommandParameter="{Binding DataContext}"/>
                                    </ContextMenu>
                                </DataGrid.Resources>
                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow" BasedOn="{StaticResource MetroDataGridRow}">
                                        <Setter Property="ContextMenu" Value="{StaticResource ContextMenu}" />
                                        <Setter Property="Tag" Value="{Binding DataContext, ElementName=SavedDataDataGrid}" />
                                    </Style>
                                </DataGrid.RowStyle>
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel>
                                                    <StackPanel.Visibility>
                                                        <MultiBinding Converter="{StaticResource MultiInvertBoolConverter}">
                                                            <Binding ElementName="DivideToBaseCheckBox" Path="IsChecked" />
                                                            <Binding Path="IsNoise" />
                                                            <Binding Path="IsNormalize" />
                                                        </MultiBinding>
                                                    </StackPanel.Visibility>
                                                    <CheckBox IsChecked="{Binding IsShow, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="{StaticResource ControlMargin}"></CheckBox>
                                                </StackPanel>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{Binding Instance[Desc].Value, Source={StaticResource StringResourceProvider}}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel Orientation="Horizontal" Margin="{StaticResource ControlMargin}">
                                                    <TextBlock TextWrapping="Wrap" Text="{Binding ., Converter={StaticResource ExperimentEntityDataItemToDesc}}" TextAlignment="Center"/>
                                                </StackPanel>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>

                                    <DataGridTemplateColumn Header="{Binding Instance[NotNoise].Value, Source={StaticResource StringResourceProvider}}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <iconPacks:PackIconMaterialLight Margin="{StaticResource ControlMargin}" Visibility="{Binding IsNoiseRemoved, Converter={StaticResource BooleanToVisibilityConverter}}" Kind="Check" Height="12" Width="12" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="{Binding Instance[Normalized].Value, Source={StaticResource StringResourceProvider}}">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <iconPacks:PackIconMaterialLight Margin="{StaticResource ControlMargin}" Visibility="{Binding IsAppliedNormalizing, Converter={StaticResource BooleanToVisibilityConverter}}" Kind="Check" Height="12" Width="12" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>

                        </Grid>

                        <Grid  Grid.Column="1" >
                            <Grid.RowDefinitions>

                                <RowDefinition Height="Auto" MinHeight="50"></RowDefinition>
                                <RowDefinition Height="*"></RowDefinition>
                            </Grid.RowDefinitions>
<StackPanel Orientation="Horizontal">
                            <Label>Retrieved Parameters</Label>
                                <Button controls:ControlsHelper.ContentCharacterCasing="Normal" Style="{DynamicResource MetroCircleButtonStyle}" BorderThickness="0" HorizontalAlignment="left" Width="40" Command="{Binding RetrieveParamsCommand}">
                                    <iconPacks:PackIconMaterial Kind="Refresh" />
                                </Button>
                            </StackPanel>
                            <DataGrid 
                                HeadersVisibility="None"
                                VerticalAlignment="Top"
                  Grid.Row="1"
                    CanUserAddRows="False"
                  Margin="5"
                  AutoGenerateColumns="False"
                  ItemsSource="{Binding RetrievedParams}"
                  RowHeaderWidth="0"
                  Style="{DynamicResource AzureDataGrid}">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding Name}" Header="Name" />
                                    <DataGridTemplateColumn Header="Value">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock Text="{Binding Value, StringFormat=N2}" FontWeight="Bold"/>
                                                    <TextBlock Text=" [±"/>
                                                    <TextBlock Text="{Binding Rms, StringFormat=N2}"/>
                                                    <TextBlock Text="] "/>
                                                    <TextBlock Text="{Binding Description}"  FontWeight="Bold"/>
                                                </StackPanel>
                                                <!--<controls:MetroProgressBar x:Name="PriceProgressBar"
                                                       Height="20"
                                                       Margin="5 2"
                                                       VerticalAlignment="Center"
                                                       Background="Transparent"
                                                       Foreground="{DynamicResource AccentColorBrush}"
                                                       Maximum="20"
                                                       Minimum="0"
                                                       Value="{Binding Price}" />-->
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>

                    </Grid>
                </Border>


            </Grid>




        </Grid>
    </DataTemplate>

</ResourceDictionary>